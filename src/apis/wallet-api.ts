/* tslint:disable */
/* eslint-disable */
/**
 * DeBank OpenAPI
 * Build for DeFi Developers.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * WalletApi - axios parameter creator
 * @export
 */
export const WalletApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * check origin
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckOrigin: async (userAddr: string, origin: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userAddr' is not null or undefined
            if (userAddr === null || userAddr === undefined) {
                throw new RequiredError('userAddr','Required parameter userAddr was null or undefined when calling getCheckOrigin.');
            }
            // verify required parameter 'origin' is not null or undefined
            if (origin === null || origin === undefined) {
                throw new RequiredError('origin','Required parameter origin was null or undefined when calling getCheckOrigin.');
            }
            const localVarPath = `/v1/wallet/check_origin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userAddr !== undefined) {
                localVarQueryParameter['user_addr'] = userAddr;
            }

            if (origin !== undefined) {
                localVarQueryParameter['origin'] = origin;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * ens
         * @param {string} text text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEns: async (text: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'text' is not null or undefined
            if (text === null || text === undefined) {
                throw new RequiredError('text','Required parameter text was null or undefined when calling getEns.');
            }
            const localVarPath = `/v1/wallet/ens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * explain origin
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExplainOrigin: async (userAddr: string, origin: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userAddr' is not null or undefined
            if (userAddr === null || userAddr === undefined) {
                throw new RequiredError('userAddr','Required parameter userAddr was null or undefined when calling getExplainOrigin.');
            }
            // verify required parameter 'origin' is not null or undefined
            if (origin === null || origin === undefined) {
                throw new RequiredError('origin','Required parameter origin was null or undefined when calling getExplainOrigin.');
            }
            const localVarPath = `/v1/wallet/explain_origin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userAddr !== undefined) {
                localVarQueryParameter['user_addr'] = userAddr;
            }

            if (origin !== undefined) {
                localVarQueryParameter['origin'] = origin;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * get tx
         * @param {string} chainId ChainId
         * @param {string} txId tx hash id
         * @param {string} gasPrice gasPrice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExplainTx: async (chainId: string, txId: string, gasPrice: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling getExplainTx.');
            }
            // verify required parameter 'txId' is not null or undefined
            if (txId === null || txId === undefined) {
                throw new RequiredError('txId','Required parameter txId was null or undefined when calling getExplainTx.');
            }
            // verify required parameter 'gasPrice' is not null or undefined
            if (gasPrice === null || gasPrice === undefined) {
                throw new RequiredError('gasPrice','Required parameter gasPrice was null or undefined when calling getExplainTx.');
            }
            const localVarPath = `/v1/wallet/get_tx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (chainId !== undefined) {
                localVarQueryParameter['chain_id'] = chainId;
            }

            if (txId !== undefined) {
                localVarQueryParameter['tx_id'] = txId;
            }

            if (gasPrice !== undefined) {
                localVarQueryParameter['gas_price'] = gasPrice;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * gas market
         * @param {string} chainId ChainId
         * @param {string} [customPrice] CustomPrice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGasMarket: async (chainId: string, customPrice?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling getGasMarket.');
            }
            const localVarPath = `/v1/wallet/gas_market`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (chainId !== undefined) {
                localVarQueryParameter['chain_id'] = chainId;
            }

            if (customPrice !== undefined) {
                localVarQueryParameter['custom_price'] = customPrice;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * user pending tx count
         * @param {string} userAddr User Address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTxCount: async (userAddr: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userAddr' is not null or undefined
            if (userAddr === null || userAddr === undefined) {
                throw new RequiredError('userAddr','Required parameter userAddr was null or undefined when calling getPendingTxCount.');
            }
            const localVarPath = `/v1/wallet/pending_tx_count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userAddr !== undefined) {
                localVarQueryParameter['user_addr'] = userAddr;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * recommend chains
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendChains: async (userAddr: string, origin: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userAddr' is not null or undefined
            if (userAddr === null || userAddr === undefined) {
                throw new RequiredError('userAddr','Required parameter userAddr was null or undefined when calling getRecommendChains.');
            }
            // verify required parameter 'origin' is not null or undefined
            if (origin === null || origin === undefined) {
                throw new RequiredError('origin','Required parameter origin was null or undefined when calling getRecommendChains.');
            }
            const localVarPath = `/v1/wallet/recommend_chains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userAddr !== undefined) {
                localVarQueryParameter['user_addr'] = userAddr;
            }

            if (origin !== undefined) {
                localVarQueryParameter['origin'] = origin;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * wallet support chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportChains: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/wallet/supported_chains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * wallet api config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrlConfig: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/wallet/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * check text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckText: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/wallet/check_text`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * check tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckTx: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/wallet/check_tx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * eth rpc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEthCall: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/wallet/eth_rpc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * explain text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExplainText: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/wallet/explain_text`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * explain tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExplainTx: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/wallet/explain_tx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * push tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPushTx: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/wallet/push_tx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletApi - functional programming interface
 * @export
 */
export const WalletApiFp = function(configuration?: Configuration) {
    return {
        /**
         * check origin
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCheckOrigin(userAddr: string, origin: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WalletApiAxiosParamCreator(configuration).getCheckOrigin(userAddr, origin, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ens
         * @param {string} text text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEns(text: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WalletApiAxiosParamCreator(configuration).getEns(text, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * explain origin
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExplainOrigin(userAddr: string, origin: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WalletApiAxiosParamCreator(configuration).getExplainOrigin(userAddr, origin, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * get tx
         * @param {string} chainId ChainId
         * @param {string} txId tx hash id
         * @param {string} gasPrice gasPrice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExplainTx(chainId: string, txId: string, gasPrice: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WalletApiAxiosParamCreator(configuration).getExplainTx(chainId, txId, gasPrice, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * gas market
         * @param {string} chainId ChainId
         * @param {string} [customPrice] CustomPrice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGasMarket(chainId: string, customPrice?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WalletApiAxiosParamCreator(configuration).getGasMarket(chainId, customPrice, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * user pending tx count
         * @param {string} userAddr User Address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPendingTxCount(userAddr: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WalletApiAxiosParamCreator(configuration).getPendingTxCount(userAddr, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * recommend chains
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecommendChains(userAddr: string, origin: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WalletApiAxiosParamCreator(configuration).getRecommendChains(userAddr, origin, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * wallet support chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupportChains(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WalletApiAxiosParamCreator(configuration).getSupportChains(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * wallet api config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUrlConfig(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WalletApiAxiosParamCreator(configuration).getUrlConfig(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * check text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCheckText(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WalletApiAxiosParamCreator(configuration).postCheckText(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * check tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCheckTx(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WalletApiAxiosParamCreator(configuration).postCheckTx(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * eth rpc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEthCall(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WalletApiAxiosParamCreator(configuration).postEthCall(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * explain text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postExplainText(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WalletApiAxiosParamCreator(configuration).postExplainText(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * explain tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postExplainTx(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WalletApiAxiosParamCreator(configuration).postExplainTx(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * push tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPushTx(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WalletApiAxiosParamCreator(configuration).postPushTx(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WalletApi - factory interface
 * @export
 */
export const WalletApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * check origin
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckOrigin(userAddr: string, origin: string, options?: any): AxiosPromise<void> {
            return WalletApiFp(configuration).getCheckOrigin(userAddr, origin, options).then((request) => request(axios, basePath));
        },
        /**
         * ens
         * @param {string} text text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEns(text: string, options?: any): AxiosPromise<void> {
            return WalletApiFp(configuration).getEns(text, options).then((request) => request(axios, basePath));
        },
        /**
         * explain origin
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExplainOrigin(userAddr: string, origin: string, options?: any): AxiosPromise<void> {
            return WalletApiFp(configuration).getExplainOrigin(userAddr, origin, options).then((request) => request(axios, basePath));
        },
        /**
         * get tx
         * @param {string} chainId ChainId
         * @param {string} txId tx hash id
         * @param {string} gasPrice gasPrice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExplainTx(chainId: string, txId: string, gasPrice: string, options?: any): AxiosPromise<void> {
            return WalletApiFp(configuration).getExplainTx(chainId, txId, gasPrice, options).then((request) => request(axios, basePath));
        },
        /**
         * gas market
         * @param {string} chainId ChainId
         * @param {string} [customPrice] CustomPrice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGasMarket(chainId: string, customPrice?: string, options?: any): AxiosPromise<void> {
            return WalletApiFp(configuration).getGasMarket(chainId, customPrice, options).then((request) => request(axios, basePath));
        },
        /**
         * user pending tx count
         * @param {string} userAddr User Address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTxCount(userAddr: string, options?: any): AxiosPromise<void> {
            return WalletApiFp(configuration).getPendingTxCount(userAddr, options).then((request) => request(axios, basePath));
        },
        /**
         * recommend chains
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendChains(userAddr: string, origin: string, options?: any): AxiosPromise<void> {
            return WalletApiFp(configuration).getRecommendChains(userAddr, origin, options).then((request) => request(axios, basePath));
        },
        /**
         * wallet support chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportChains(options?: any): AxiosPromise<void> {
            return WalletApiFp(configuration).getSupportChains(options).then((request) => request(axios, basePath));
        },
        /**
         * wallet api config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrlConfig(options?: any): AxiosPromise<void> {
            return WalletApiFp(configuration).getUrlConfig(options).then((request) => request(axios, basePath));
        },
        /**
         * check text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckText(options?: any): AxiosPromise<void> {
            return WalletApiFp(configuration).postCheckText(options).then((request) => request(axios, basePath));
        },
        /**
         * check tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckTx(options?: any): AxiosPromise<void> {
            return WalletApiFp(configuration).postCheckTx(options).then((request) => request(axios, basePath));
        },
        /**
         * eth rpc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEthCall(options?: any): AxiosPromise<void> {
            return WalletApiFp(configuration).postEthCall(options).then((request) => request(axios, basePath));
        },
        /**
         * explain text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExplainText(options?: any): AxiosPromise<void> {
            return WalletApiFp(configuration).postExplainText(options).then((request) => request(axios, basePath));
        },
        /**
         * explain tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExplainTx(options?: any): AxiosPromise<void> {
            return WalletApiFp(configuration).postExplainTx(options).then((request) => request(axios, basePath));
        },
        /**
         * push tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPushTx(options?: any): AxiosPromise<void> {
            return WalletApiFp(configuration).postPushTx(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WalletApi - object-oriented interface
 * @export
 * @class WalletApi
 * @extends {BaseAPI}
 */
export class WalletApi extends BaseAPI {
    /**
     * check origin
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getCheckOrigin(userAddr: string, origin: string, options?: any) {
        return WalletApiFp(this.configuration).getCheckOrigin(userAddr, origin, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * ens
     * @param {string} text text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getEns(text: string, options?: any) {
        return WalletApiFp(this.configuration).getEns(text, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * explain origin
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getExplainOrigin(userAddr: string, origin: string, options?: any) {
        return WalletApiFp(this.configuration).getExplainOrigin(userAddr, origin, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * get tx
     * @param {string} chainId ChainId
     * @param {string} txId tx hash id
     * @param {string} gasPrice gasPrice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getExplainTx(chainId: string, txId: string, gasPrice: string, options?: any) {
        return WalletApiFp(this.configuration).getExplainTx(chainId, txId, gasPrice, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * gas market
     * @param {string} chainId ChainId
     * @param {string} [customPrice] CustomPrice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getGasMarket(chainId: string, customPrice?: string, options?: any) {
        return WalletApiFp(this.configuration).getGasMarket(chainId, customPrice, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * user pending tx count
     * @param {string} userAddr User Address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getPendingTxCount(userAddr: string, options?: any) {
        return WalletApiFp(this.configuration).getPendingTxCount(userAddr, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * recommend chains
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getRecommendChains(userAddr: string, origin: string, options?: any) {
        return WalletApiFp(this.configuration).getRecommendChains(userAddr, origin, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * wallet support chain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getSupportChains(options?: any) {
        return WalletApiFp(this.configuration).getSupportChains(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * wallet api config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getUrlConfig(options?: any) {
        return WalletApiFp(this.configuration).getUrlConfig(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * check text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public postCheckText(options?: any) {
        return WalletApiFp(this.configuration).postCheckText(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * check tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public postCheckTx(options?: any) {
        return WalletApiFp(this.configuration).postCheckTx(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * eth rpc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public postEthCall(options?: any) {
        return WalletApiFp(this.configuration).postEthCall(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * explain text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public postExplainText(options?: any) {
        return WalletApiFp(this.configuration).postExplainText(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * explain tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public postExplainTx(options?: any) {
        return WalletApiFp(this.configuration).postExplainTx(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * push tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public postPushTx(options?: any) {
        return WalletApiFp(this.configuration).postPushTx(options).then((request) => request(this.axios, this.basePath));
    }
}
