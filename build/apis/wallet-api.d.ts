/**
 * DeBank OpenAPI
 * Build for DeFi Developers.
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
/**
 * WalletApi - axios parameter creator
 * @export
 */
export declare const WalletApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * check origin
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCheckOrigin: (userAddr: string, origin: string, options?: any) => Promise<RequestArgs>;
    /**
     * ens
     * @param {string} text text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEns: (text: string, options?: any) => Promise<RequestArgs>;
    /**
     * explain origin
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExplainOrigin: (userAddr: string, origin: string, options?: any) => Promise<RequestArgs>;
    /**
     * get tx
     * @param {string} chainId ChainId
     * @param {string} txId tx hash id
     * @param {string} gasPrice gasPrice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExplainTx: (chainId: string, txId: string, gasPrice: string, options?: any) => Promise<RequestArgs>;
    /**
     * gas market
     * @param {string} chainId ChainId
     * @param {string} [customPrice] CustomPrice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGasMarket: (chainId: string, customPrice?: string, options?: any) => Promise<RequestArgs>;
    /**
     * user pending tx count
     * @param {string} userAddr User Address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPendingTxCount: (userAddr: string, options?: any) => Promise<RequestArgs>;
    /**
     * recommend chains
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecommendChains: (userAddr: string, origin: string, options?: any) => Promise<RequestArgs>;
    /**
     * wallet support chain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSupportChains: (options?: any) => Promise<RequestArgs>;
    /**
     * wallet api config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUrlConfig: (options?: any) => Promise<RequestArgs>;
    /**
     * check text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCheckText: (options?: any) => Promise<RequestArgs>;
    /**
     * check tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCheckTx: (options?: any) => Promise<RequestArgs>;
    /**
     * eth rpc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postEthCall: (options?: any) => Promise<RequestArgs>;
    /**
     * explain text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postExplainText: (options?: any) => Promise<RequestArgs>;
    /**
     * explain tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postExplainTx: (options?: any) => Promise<RequestArgs>;
    /**
     * push tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postPushTx: (options?: any) => Promise<RequestArgs>;
};
/**
 * WalletApi - functional programming interface
 * @export
 */
export declare const WalletApiFp: (configuration?: Configuration) => {
    /**
     * check origin
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCheckOrigin(userAddr: string, origin: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * ens
     * @param {string} text text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEns(text: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * explain origin
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExplainOrigin(userAddr: string, origin: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * get tx
     * @param {string} chainId ChainId
     * @param {string} txId tx hash id
     * @param {string} gasPrice gasPrice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExplainTx(chainId: string, txId: string, gasPrice: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * gas market
     * @param {string} chainId ChainId
     * @param {string} [customPrice] CustomPrice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGasMarket(chainId: string, customPrice?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * user pending tx count
     * @param {string} userAddr User Address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPendingTxCount(userAddr: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * recommend chains
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecommendChains(userAddr: string, origin: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * wallet support chain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSupportChains(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * wallet api config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUrlConfig(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * check text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCheckText(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * check tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCheckTx(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * eth rpc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postEthCall(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * explain text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postExplainText(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * explain tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postExplainTx(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * push tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postPushTx(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * WalletApi - factory interface
 * @export
 */
export declare const WalletApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * check origin
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCheckOrigin(userAddr: string, origin: string, options?: any): AxiosPromise<void>;
    /**
     * ens
     * @param {string} text text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEns(text: string, options?: any): AxiosPromise<void>;
    /**
     * explain origin
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExplainOrigin(userAddr: string, origin: string, options?: any): AxiosPromise<void>;
    /**
     * get tx
     * @param {string} chainId ChainId
     * @param {string} txId tx hash id
     * @param {string} gasPrice gasPrice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExplainTx(chainId: string, txId: string, gasPrice: string, options?: any): AxiosPromise<void>;
    /**
     * gas market
     * @param {string} chainId ChainId
     * @param {string} [customPrice] CustomPrice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGasMarket(chainId: string, customPrice?: string, options?: any): AxiosPromise<void>;
    /**
     * user pending tx count
     * @param {string} userAddr User Address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPendingTxCount(userAddr: string, options?: any): AxiosPromise<void>;
    /**
     * recommend chains
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecommendChains(userAddr: string, origin: string, options?: any): AxiosPromise<void>;
    /**
     * wallet support chain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSupportChains(options?: any): AxiosPromise<void>;
    /**
     * wallet api config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUrlConfig(options?: any): AxiosPromise<void>;
    /**
     * check text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCheckText(options?: any): AxiosPromise<void>;
    /**
     * check tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCheckTx(options?: any): AxiosPromise<void>;
    /**
     * eth rpc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postEthCall(options?: any): AxiosPromise<void>;
    /**
     * explain text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postExplainText(options?: any): AxiosPromise<void>;
    /**
     * explain tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postExplainTx(options?: any): AxiosPromise<void>;
    /**
     * push tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postPushTx(options?: any): AxiosPromise<void>;
};
/**
 * WalletApi - object-oriented interface
 * @export
 * @class WalletApi
 * @extends {BaseAPI}
 */
export declare class WalletApi extends BaseAPI {
    /**
     * check origin
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getCheckOrigin(userAddr: string, origin: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * ens
     * @param {string} text text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getEns(text: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * explain origin
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getExplainOrigin(userAddr: string, origin: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * get tx
     * @param {string} chainId ChainId
     * @param {string} txId tx hash id
     * @param {string} gasPrice gasPrice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getExplainTx(chainId: string, txId: string, gasPrice: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * gas market
     * @param {string} chainId ChainId
     * @param {string} [customPrice] CustomPrice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getGasMarket(chainId: string, customPrice?: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * user pending tx count
     * @param {string} userAddr User Address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getPendingTxCount(userAddr: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * recommend chains
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getRecommendChains(userAddr: string, origin: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * wallet support chain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getSupportChains(options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * wallet api config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getUrlConfig(options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * check text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    postCheckText(options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * check tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    postCheckTx(options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * eth rpc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    postEthCall(options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * explain text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    postExplainText(options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * explain tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    postExplainTx(options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * push tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    postPushTx(options?: any): Promise<import("axios").AxiosResponse<void, any>>;
}
