"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserApi = exports.UserApiFactory = exports.UserApiFp = exports.UserApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * DeBank OpenAPI
 * Build for DeFi Developers.
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * UserApi - axios parameter creator
 * @export
 */
const UserApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get list of protocols with user portfolio details
         * @param {string} id User Address
         * @param {string} [chainId] ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserComplexProtocolList: (id, chainId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getUserComplexProtocolList.');
            }
            const localVarPath = `/v1/user/complex_protocol_list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (chainId !== undefined) {
                localVarQueryParameter['chain_id'] = chainId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get user nft list
         * @param {string} id Address
         * @param {string} chainId ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNftList: (id, chainId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getUserNftList.');
            }
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new base_1.RequiredError('chainId', 'Required parameter chainId was null or undefined when calling getUserNftList.');
            }
            const localVarPath = `/v1/user/nft_list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (chainId !== undefined) {
                localVarQueryParameter['chain_id'] = chainId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get user nft list on all supported chains
         * @param {string} id Address
         * @param {boolean} isall boolean
         * @throws {RequiredError}
         */
        getUserAllNftList: (id, is_all) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getUserNftList.');
            }
            const localVarPath = `/v1/user/all_nft_list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the user's portfolio in the protocol
         * @param {string} id User Address
         * @param {string} protocolId protocol id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProtocol: (id, protocolId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getUserProtocol.');
            }
            // verify required parameter 'protocolId' is not null or undefined
            if (protocolId === null || protocolId === undefined) {
                throw new base_1.RequiredError('protocolId', 'Required parameter protocolId was null or undefined when calling getUserProtocol.');
            }
            const localVarPath = `/v1/user/protocol`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (protocolId !== undefined) {
                localVarQueryParameter['protocol_id'] = protocolId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * Stats the user's protocol assets on a chain
         * @param {string} id User Address
         * @param {string} [chainId] ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSimpleProtocolList: (id, chainId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getUserSimpleProtocolList.');
            }
            const localVarPath = `/v1/user/simple_protocol_list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (chainId !== undefined) {
                localVarQueryParameter['chain_id'] = chainId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get user token balance
         * @param {string} id Address
         * @param {string} tokenId token id
         * @param {string} [chainId] ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserToken: (id, tokenId, chainId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getUserToken.');
            }
            // verify required parameter 'tokenId' is not null or undefined
            if (tokenId === null || tokenId === undefined) {
                throw new base_1.RequiredError('tokenId', 'Required parameter tokenId was null or undefined when calling getUserToken.');
            }
            const localVarPath = `/v1/user/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (chainId !== undefined) {
                localVarQueryParameter['chain_id'] = chainId;
            }
            if (tokenId !== undefined) {
                localVarQueryParameter['token_id'] = tokenId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * Show the user's risk exposure of approved token on a chain
         * @param {string} id User Address
         * @param {string} chainId ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTokenAuthorizedList: (id, chainId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getUserTokenAuthorizedList.');
            }
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new base_1.RequiredError('chainId', 'Required parameter chainId was null or undefined when calling getUserTokenAuthorizedList.');
            }
            const localVarPath = `/v1/user/token_authorized_list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (chainId !== undefined) {
                localVarQueryParameter['chain_id'] = chainId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get user token balance
         * @param {string} id Address
         * @param {string} [chainId] ChainID
         * @param {boolean} [isAll] If true, all tokens are returned, including protocol-derived tokens
         * @param {boolean} [hasBalance] If true, only token with balance will returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTokenList: (id, chainId, isAll, hasBalance, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getUserTokenList.');
            }
            const localVarPath = `/v1/user/token_list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (chainId !== undefined) {
                localVarQueryParameter['chain_id'] = chainId;
            }
            if (isAll !== undefined) {
                localVarQueryParameter['is_all'] = isAll;
            }
            if (hasBalance !== undefined) {
                localVarQueryParameter['has_balance'] = hasBalance;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Tokens By Filter
         * @param {string} id User Address
         * @param {string} q filter args
         * @param {string} [chainId] ChainID
         * @param {boolean} [hasBalance] If true, only token with balance will returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTokenSearch: (id, q, chainId, hasBalance, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getUserTokenSearch.');
            }
            // verify required parameter 'q' is not null or undefined
            if (q === null || q === undefined) {
                throw new base_1.RequiredError('q', 'Required parameter q was null or undefined when calling getUserTokenSearch.');
            }
            const localVarPath = `/v1/user/token_search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (chainId !== undefined) {
                localVarQueryParameter['chain_id'] = chainId;
            }
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (hasBalance !== undefined) {
                localVarQueryParameter['has_balance'] = hasBalance;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the net assets of a chain
         * @param {string} id User Address
         * @param {string} chainId ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTotalBalance: (id, chainId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getUserTotalBalance.');
            }
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new base_1.RequiredError('chainId', 'Required parameter chainId was null or undefined when calling getUserTotalBalance.');
            }
            const localVarPath = `/v1/user/chain_balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (chainId !== undefined) {
                localVarQueryParameter['chain_id'] = chainId;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get net assets on multiple chains, including tokens and protocols
         * @param {string} id User Address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTotalBalance_1: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getUserTotalBalance_1.');
            }
            const localVarPath = `/v1/user/total_balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.UserApiAxiosParamCreator = UserApiAxiosParamCreator;
/**
 * UserApi - functional programming interface
 * @export
 */
const UserApiFp = function (configuration) {
    return {
        /**
         * Get list of protocols with user portfolio details
         * @param {string} id User Address
         * @param {string} [chainId] ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserComplexProtocolList(id, chainId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.UserApiAxiosParamCreator)(configuration).getUserComplexProtocolList(id, chainId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get user nft list
         * @param {string} id Address
         * @param {string} chainId ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNftList(id, chainId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.UserApiAxiosParamCreator)(configuration).getUserNftList(id, chainId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the user's portfolio in the protocol
         * @param {string} id User Address
         * @param {string} protocolId protocol id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProtocol(id, protocolId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.UserApiAxiosParamCreator)(configuration).getUserProtocol(id, protocolId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Stats the user's protocol assets on a chain
         * @param {string} id User Address
         * @param {string} [chainId] ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSimpleProtocolList(id, chainId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.UserApiAxiosParamCreator)(configuration).getUserSimpleProtocolList(id, chainId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get user token balance
         * @param {string} id Address
         * @param {string} tokenId token id
         * @param {string} [chainId] ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserToken(id, tokenId, chainId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.UserApiAxiosParamCreator)(configuration).getUserToken(id, tokenId, chainId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Show the user's risk exposure of approved token on a chain
         * @param {string} id User Address
         * @param {string} chainId ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTokenAuthorizedList(id, chainId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.UserApiAxiosParamCreator)(configuration).getUserTokenAuthorizedList(id, chainId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get user token balance
         * @param {string} id Address
         * @param {string} [chainId] ChainID
         * @param {boolean} [isAll] If true, all tokens are returned, including protocol-derived tokens
         * @param {boolean} [hasBalance] If true, only token with balance will returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTokenList(id, chainId, isAll, hasBalance, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.UserApiAxiosParamCreator)(configuration).getUserTokenList(id, chainId, isAll, hasBalance, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Tokens By Filter
         * @param {string} id User Address
         * @param {string} q filter args
         * @param {string} [chainId] ChainID
         * @param {boolean} [hasBalance] If true, only token with balance will returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTokenSearch(id, q, chainId, hasBalance, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.UserApiAxiosParamCreator)(configuration).getUserTokenSearch(id, q, chainId, hasBalance, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the net assets of a chain
         * @param {string} id User Address
         * @param {string} chainId ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTotalBalance(id, chainId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.UserApiAxiosParamCreator)(configuration).getUserTotalBalance(id, chainId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get net assets on multiple chains, including tokens and protocols
         * @param {string} id User Address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTotalBalance_1(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.UserApiAxiosParamCreator)(configuration).getUserTotalBalance_1(id, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
exports.UserApiFp = UserApiFp;
/**
 * UserApi - factory interface
 * @export
 */
const UserApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Get list of protocols with user portfolio details
         * @param {string} id User Address
         * @param {string} [chainId] ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserComplexProtocolList(id, chainId, options) {
            return (0, exports.UserApiFp)(configuration).getUserComplexProtocolList(id, chainId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user nft list
         * @param {string} id Address
         * @param {string} chainId ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNftList(id, chainId, options) {
            return (0, exports.UserApiFp)(configuration).getUserNftList(id, chainId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the user's portfolio in the protocol
         * @param {string} id User Address
         * @param {string} protocolId protocol id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProtocol(id, protocolId, options) {
            return (0, exports.UserApiFp)(configuration).getUserProtocol(id, protocolId, options).then((request) => request(axios, basePath));
        },
        /**
         * Stats the user's protocol assets on a chain
         * @param {string} id User Address
         * @param {string} [chainId] ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSimpleProtocolList(id, chainId, options) {
            return (0, exports.UserApiFp)(configuration).getUserSimpleProtocolList(id, chainId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user token balance
         * @param {string} id Address
         * @param {string} tokenId token id
         * @param {string} [chainId] ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserToken(id, tokenId, chainId, options) {
            return (0, exports.UserApiFp)(configuration).getUserToken(id, tokenId, chainId, options).then((request) => request(axios, basePath));
        },
        /**
         * Show the user's risk exposure of approved token on a chain
         * @param {string} id User Address
         * @param {string} chainId ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTokenAuthorizedList(id, chainId, options) {
            return (0, exports.UserApiFp)(configuration).getUserTokenAuthorizedList(id, chainId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user token balance
         * @param {string} id Address
         * @param {string} [chainId] ChainID
         * @param {boolean} [isAll] If true, all tokens are returned, including protocol-derived tokens
         * @param {boolean} [hasBalance] If true, only token with balance will returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTokenList(id, chainId, isAll, hasBalance, options) {
            return (0, exports.UserApiFp)(configuration).getUserTokenList(id, chainId, isAll, hasBalance, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Tokens By Filter
         * @param {string} id User Address
         * @param {string} q filter args
         * @param {string} [chainId] ChainID
         * @param {boolean} [hasBalance] If true, only token with balance will returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTokenSearch(id, q, chainId, hasBalance, options) {
            return (0, exports.UserApiFp)(configuration).getUserTokenSearch(id, q, chainId, hasBalance, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the net assets of a chain
         * @param {string} id User Address
         * @param {string} chainId ChainID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTotalBalance(id, chainId, options) {
            return (0, exports.UserApiFp)(configuration).getUserTotalBalance(id, chainId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get net assets on multiple chains, including tokens and protocols
         * @param {string} id User Address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTotalBalance_1(id, options) {
            return (0, exports.UserApiFp)(configuration).getUserTotalBalance_1(id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.UserApiFactory = UserApiFactory;
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
class UserApi extends base_1.BaseAPI {
    /**
     * Get list of protocols with user portfolio details
     * @param {string} id User Address
     * @param {string} [chainId] ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserComplexProtocolList(id, chainId, options) {
        return (0, exports.UserApiFp)(this.configuration).getUserComplexProtocolList(id, chainId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get user nft list
     * @param {string} id Address
     * @param {string} chainId ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserNftList(id, chainId, options) {
        return (0, exports.UserApiFp)(this.configuration).getUserNftList(id, chainId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the user's portfolio in the protocol
     * @param {string} id User Address
     * @param {string} protocolId protocol id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserProtocol(id, protocolId, options) {
        return (0, exports.UserApiFp)(this.configuration).getUserProtocol(id, protocolId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Stats the user's protocol assets on a chain
     * @param {string} id User Address
     * @param {string} [chainId] ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserSimpleProtocolList(id, chainId, options) {
        return (0, exports.UserApiFp)(this.configuration).getUserSimpleProtocolList(id, chainId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get user token balance
     * @param {string} id Address
     * @param {string} tokenId token id
     * @param {string} [chainId] ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserToken(id, tokenId, chainId, options) {
        return (0, exports.UserApiFp)(this.configuration).getUserToken(id, tokenId, chainId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Show the user's risk exposure of approved token on a chain
     * @param {string} id User Address
     * @param {string} chainId ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserTokenAuthorizedList(id, chainId, options) {
        return (0, exports.UserApiFp)(this.configuration).getUserTokenAuthorizedList(id, chainId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get user token balance
     * @param {string} id Address
     * @param {string} [chainId] ChainID
     * @param {boolean} [isAll] If true, all tokens are returned, including protocol-derived tokens
     * @param {boolean} [hasBalance] If true, only token with balance will returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserTokenList(id, chainId, isAll, hasBalance, options) {
        return (0, exports.UserApiFp)(this.configuration).getUserTokenList(id, chainId, isAll, hasBalance, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Tokens By Filter
     * @param {string} id User Address
     * @param {string} q filter args
     * @param {string} [chainId] ChainID
     * @param {boolean} [hasBalance] If true, only token with balance will returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserTokenSearch(id, q, chainId, hasBalance, options) {
        return (0, exports.UserApiFp)(this.configuration).getUserTokenSearch(id, q, chainId, hasBalance, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the net assets of a chain
     * @param {string} id User Address
     * @param {string} chainId ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserTotalBalance(id, chainId, options) {
        return (0, exports.UserApiFp)(this.configuration).getUserTotalBalance(id, chainId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get net assets on multiple chains, including tokens and protocols
     * @param {string} id User Address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserTotalBalance_1(id, options) {
        return (0, exports.UserApiFp)(this.configuration).getUserTotalBalance_1(id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UserApi = UserApi;
