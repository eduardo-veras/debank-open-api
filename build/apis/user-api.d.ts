/**
 * DeBank OpenAPI
 * Build for DeFi Developers.
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
/**
 * UserApi - axios parameter creator
 * @export
 */
export declare const UserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get list of protocols with user portfolio details
     * @param {string} id User Address
     * @param {string} [chainId] ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserComplexProtocolList: (id: string, chainId?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get user nft list
     * @param {string} id Address
     * @param {string} chainId ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserNftList: (id: string, chainId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get user nft list on all supported chains
     * @param {string} id Address
     * @param {boolean} isall boolean
     * @throws {RequiredError}
     */
    getUserAllNftList: (id: string, is_all: boolean) => Promise<RequestArgs>;
    /**
     * Get the user's portfolio in the protocol
     * @param {string} id User Address
     * @param {string} protocolId protocol id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProtocol: (id: string, protocolId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Stats the user's protocol assets on a chain
     * @param {string} id User Address
     * @param {string} [chainId] ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSimpleProtocolList: (id: string, chainId?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get user token balance
     * @param {string} id Address
     * @param {string} tokenId token id
     * @param {string} [chainId] ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserToken: (id: string, tokenId: string, chainId?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Show the user's risk exposure of approved token on a chain
     * @param {string} id User Address
     * @param {string} chainId ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTokenAuthorizedList: (id: string, chainId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get user token balance
     * @param {string} id Address
     * @param {string} [chainId] ChainID
     * @param {boolean} [isAll] If true, all tokens are returned, including protocol-derived tokens
     * @param {boolean} [hasBalance] If true, only token with balance will returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTokenList: (id: string, chainId?: string, isAll?: boolean, hasBalance?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     * Get Tokens By Filter
     * @param {string} id User Address
     * @param {string} q filter args
     * @param {string} [chainId] ChainID
     * @param {boolean} [hasBalance] If true, only token with balance will returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTokenSearch: (id: string, q: string, chainId?: string, hasBalance?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     * Get the net assets of a chain
     * @param {string} id User Address
     * @param {string} chainId ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTotalBalance: (id: string, chainId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get net assets on multiple chains, including tokens and protocols
     * @param {string} id User Address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTotalBalance_1: (id: string, options?: any) => Promise<RequestArgs>;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration) => {
    /**
     * Get list of protocols with user portfolio details
     * @param {string} id User Address
     * @param {string} [chainId] ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserComplexProtocolList(id: string, chainId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get user nft list
     * @param {string} id Address
     * @param {string} chainId ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserNftList(id: string, chainId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get the user's portfolio in the protocol
     * @param {string} id User Address
     * @param {string} protocolId protocol id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProtocol(id: string, protocolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Stats the user's protocol assets on a chain
     * @param {string} id User Address
     * @param {string} [chainId] ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSimpleProtocolList(id: string, chainId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get user token balance
     * @param {string} id Address
     * @param {string} tokenId token id
     * @param {string} [chainId] ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserToken(id: string, tokenId: string, chainId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Show the user's risk exposure of approved token on a chain
     * @param {string} id User Address
     * @param {string} chainId ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTokenAuthorizedList(id: string, chainId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get user token balance
     * @param {string} id Address
     * @param {string} [chainId] ChainID
     * @param {boolean} [isAll] If true, all tokens are returned, including protocol-derived tokens
     * @param {boolean} [hasBalance] If true, only token with balance will returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTokenList(id: string, chainId?: string, isAll?: boolean, hasBalance?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get Tokens By Filter
     * @param {string} id User Address
     * @param {string} q filter args
     * @param {string} [chainId] ChainID
     * @param {boolean} [hasBalance] If true, only token with balance will returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTokenSearch(id: string, q: string, chainId?: string, hasBalance?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get the net assets of a chain
     * @param {string} id User Address
     * @param {string} chainId ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTotalBalance(id: string, chainId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get net assets on multiple chains, including tokens and protocols
     * @param {string} id User Address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTotalBalance_1(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get list of protocols with user portfolio details
     * @param {string} id User Address
     * @param {string} [chainId] ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserComplexProtocolList(id: string, chainId?: string, options?: any): AxiosPromise<void>;
    /**
     * Get user nft list
     * @param {string} id Address
     * @param {string} chainId ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserNftList(id: string, chainId: string, options?: any): AxiosPromise<void>;
    /**
     * Get the user's portfolio in the protocol
     * @param {string} id User Address
     * @param {string} protocolId protocol id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserProtocol(id: string, protocolId: string, options?: any): AxiosPromise<void>;
    /**
     * Stats the user's protocol assets on a chain
     * @param {string} id User Address
     * @param {string} [chainId] ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSimpleProtocolList(id: string, chainId?: string, options?: any): AxiosPromise<void>;
    /**
     * Get user token balance
     * @param {string} id Address
     * @param {string} tokenId token id
     * @param {string} [chainId] ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserToken(id: string, tokenId: string, chainId?: string, options?: any): AxiosPromise<void>;
    /**
     * Show the user's risk exposure of approved token on a chain
     * @param {string} id User Address
     * @param {string} chainId ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTokenAuthorizedList(id: string, chainId: string, options?: any): AxiosPromise<void>;
    /**
     * Get user token balance
     * @param {string} id Address
     * @param {string} [chainId] ChainID
     * @param {boolean} [isAll] If true, all tokens are returned, including protocol-derived tokens
     * @param {boolean} [hasBalance] If true, only token with balance will returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTokenList(id: string, chainId?: string, isAll?: boolean, hasBalance?: boolean, options?: any): AxiosPromise<void>;
    /**
     * Get Tokens By Filter
     * @param {string} id User Address
     * @param {string} q filter args
     * @param {string} [chainId] ChainID
     * @param {boolean} [hasBalance] If true, only token with balance will returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTokenSearch(id: string, q: string, chainId?: string, hasBalance?: boolean, options?: any): AxiosPromise<void>;
    /**
     * Get the net assets of a chain
     * @param {string} id User Address
     * @param {string} chainId ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTotalBalance(id: string, chainId: string, options?: any): AxiosPromise<void>;
    /**
     * Get net assets on multiple chains, including tokens and protocols
     * @param {string} id User Address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTotalBalance_1(id: string, options?: any): AxiosPromise<void>;
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     * Get list of protocols with user portfolio details
     * @param {string} id User Address
     * @param {string} [chainId] ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserComplexProtocolList(id: string, chainId?: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get user nft list
     * @param {string} id Address
     * @param {string} chainId ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserNftList(id: string, chainId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get the user's portfolio in the protocol
     * @param {string} id User Address
     * @param {string} protocolId protocol id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserProtocol(id: string, protocolId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Stats the user's protocol assets on a chain
     * @param {string} id User Address
     * @param {string} [chainId] ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserSimpleProtocolList(id: string, chainId?: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get user token balance
     * @param {string} id Address
     * @param {string} tokenId token id
     * @param {string} [chainId] ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserToken(id: string, tokenId: string, chainId?: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Show the user's risk exposure of approved token on a chain
     * @param {string} id User Address
     * @param {string} chainId ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserTokenAuthorizedList(id: string, chainId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get user token balance
     * @param {string} id Address
     * @param {string} [chainId] ChainID
     * @param {boolean} [isAll] If true, all tokens are returned, including protocol-derived tokens
     * @param {boolean} [hasBalance] If true, only token with balance will returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserTokenList(id: string, chainId?: string, isAll?: boolean, hasBalance?: boolean, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get Tokens By Filter
     * @param {string} id User Address
     * @param {string} q filter args
     * @param {string} [chainId] ChainID
     * @param {boolean} [hasBalance] If true, only token with balance will returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserTokenSearch(id: string, q: string, chainId?: string, hasBalance?: boolean, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get the net assets of a chain
     * @param {string} id User Address
     * @param {string} chainId ChainID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserTotalBalance(id: string, chainId: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get net assets on multiple chains, including tokens and protocols
     * @param {string} id User Address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserTotalBalance_1(id: string, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
}
