"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletApi = exports.WalletApiFactory = exports.WalletApiFp = exports.WalletApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * DeBank OpenAPI
 * Build for DeFi Developers.
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * WalletApi - axios parameter creator
 * @export
 */
const WalletApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * check origin
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckOrigin: (userAddr, origin, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userAddr' is not null or undefined
            if (userAddr === null || userAddr === undefined) {
                throw new base_1.RequiredError('userAddr', 'Required parameter userAddr was null or undefined when calling getCheckOrigin.');
            }
            // verify required parameter 'origin' is not null or undefined
            if (origin === null || origin === undefined) {
                throw new base_1.RequiredError('origin', 'Required parameter origin was null or undefined when calling getCheckOrigin.');
            }
            const localVarPath = `/v1/wallet/check_origin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (userAddr !== undefined) {
                localVarQueryParameter['user_addr'] = userAddr;
            }
            if (origin !== undefined) {
                localVarQueryParameter['origin'] = origin;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * ens
         * @param {string} text text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEns: (text, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'text' is not null or undefined
            if (text === null || text === undefined) {
                throw new base_1.RequiredError('text', 'Required parameter text was null or undefined when calling getEns.');
            }
            const localVarPath = `/v1/wallet/ens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * explain origin
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExplainOrigin: (userAddr, origin, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userAddr' is not null or undefined
            if (userAddr === null || userAddr === undefined) {
                throw new base_1.RequiredError('userAddr', 'Required parameter userAddr was null or undefined when calling getExplainOrigin.');
            }
            // verify required parameter 'origin' is not null or undefined
            if (origin === null || origin === undefined) {
                throw new base_1.RequiredError('origin', 'Required parameter origin was null or undefined when calling getExplainOrigin.');
            }
            const localVarPath = `/v1/wallet/explain_origin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (userAddr !== undefined) {
                localVarQueryParameter['user_addr'] = userAddr;
            }
            if (origin !== undefined) {
                localVarQueryParameter['origin'] = origin;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * get tx
         * @param {string} chainId ChainId
         * @param {string} txId tx hash id
         * @param {string} gasPrice gasPrice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExplainTx: (chainId, txId, gasPrice, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new base_1.RequiredError('chainId', 'Required parameter chainId was null or undefined when calling getExplainTx.');
            }
            // verify required parameter 'txId' is not null or undefined
            if (txId === null || txId === undefined) {
                throw new base_1.RequiredError('txId', 'Required parameter txId was null or undefined when calling getExplainTx.');
            }
            // verify required parameter 'gasPrice' is not null or undefined
            if (gasPrice === null || gasPrice === undefined) {
                throw new base_1.RequiredError('gasPrice', 'Required parameter gasPrice was null or undefined when calling getExplainTx.');
            }
            const localVarPath = `/v1/wallet/get_tx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (chainId !== undefined) {
                localVarQueryParameter['chain_id'] = chainId;
            }
            if (txId !== undefined) {
                localVarQueryParameter['tx_id'] = txId;
            }
            if (gasPrice !== undefined) {
                localVarQueryParameter['gas_price'] = gasPrice;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * gas market
         * @param {string} chainId ChainId
         * @param {string} [customPrice] CustomPrice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGasMarket: (chainId, customPrice, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new base_1.RequiredError('chainId', 'Required parameter chainId was null or undefined when calling getGasMarket.');
            }
            const localVarPath = `/v1/wallet/gas_market`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (chainId !== undefined) {
                localVarQueryParameter['chain_id'] = chainId;
            }
            if (customPrice !== undefined) {
                localVarQueryParameter['custom_price'] = customPrice;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * user pending tx count
         * @param {string} userAddr User Address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTxCount: (userAddr, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userAddr' is not null or undefined
            if (userAddr === null || userAddr === undefined) {
                throw new base_1.RequiredError('userAddr', 'Required parameter userAddr was null or undefined when calling getPendingTxCount.');
            }
            const localVarPath = `/v1/wallet/pending_tx_count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (userAddr !== undefined) {
                localVarQueryParameter['user_addr'] = userAddr;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * recommend chains
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendChains: (userAddr, origin, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userAddr' is not null or undefined
            if (userAddr === null || userAddr === undefined) {
                throw new base_1.RequiredError('userAddr', 'Required parameter userAddr was null or undefined when calling getRecommendChains.');
            }
            // verify required parameter 'origin' is not null or undefined
            if (origin === null || origin === undefined) {
                throw new base_1.RequiredError('origin', 'Required parameter origin was null or undefined when calling getRecommendChains.');
            }
            const localVarPath = `/v1/wallet/recommend_chains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (userAddr !== undefined) {
                localVarQueryParameter['user_addr'] = userAddr;
            }
            if (origin !== undefined) {
                localVarQueryParameter['origin'] = origin;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * wallet support chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportChains: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/wallet/supported_chains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * wallet api config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrlConfig: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/wallet/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * check text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckText: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/wallet/check_text`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * check tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckTx: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/wallet/check_tx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * eth rpc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEthCall: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/wallet/eth_rpc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * explain text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExplainText: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/wallet/explain_text`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * explain tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExplainTx: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/wallet/explain_tx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         * push tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPushTx: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/wallet/push_tx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.WalletApiAxiosParamCreator = WalletApiAxiosParamCreator;
/**
 * WalletApi - functional programming interface
 * @export
 */
const WalletApiFp = function (configuration) {
    return {
        /**
         * check origin
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckOrigin(userAddr, origin, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.WalletApiAxiosParamCreator)(configuration).getCheckOrigin(userAddr, origin, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * ens
         * @param {string} text text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEns(text, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.WalletApiAxiosParamCreator)(configuration).getEns(text, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * explain origin
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExplainOrigin(userAddr, origin, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.WalletApiAxiosParamCreator)(configuration).getExplainOrigin(userAddr, origin, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * get tx
         * @param {string} chainId ChainId
         * @param {string} txId tx hash id
         * @param {string} gasPrice gasPrice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExplainTx(chainId, txId, gasPrice, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.WalletApiAxiosParamCreator)(configuration).getExplainTx(chainId, txId, gasPrice, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * gas market
         * @param {string} chainId ChainId
         * @param {string} [customPrice] CustomPrice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGasMarket(chainId, customPrice, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.WalletApiAxiosParamCreator)(configuration).getGasMarket(chainId, customPrice, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * user pending tx count
         * @param {string} userAddr User Address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTxCount(userAddr, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.WalletApiAxiosParamCreator)(configuration).getPendingTxCount(userAddr, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * recommend chains
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendChains(userAddr, origin, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.WalletApiAxiosParamCreator)(configuration).getRecommendChains(userAddr, origin, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * wallet support chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportChains(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.WalletApiAxiosParamCreator)(configuration).getSupportChains(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * wallet api config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrlConfig(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.WalletApiAxiosParamCreator)(configuration).getUrlConfig(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * check text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckText(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.WalletApiAxiosParamCreator)(configuration).postCheckText(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * check tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckTx(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.WalletApiAxiosParamCreator)(configuration).postCheckTx(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * eth rpc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEthCall(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.WalletApiAxiosParamCreator)(configuration).postEthCall(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * explain text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExplainText(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.WalletApiAxiosParamCreator)(configuration).postExplainText(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * explain tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExplainTx(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.WalletApiAxiosParamCreator)(configuration).postExplainTx(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * push tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPushTx(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield (0, exports.WalletApiAxiosParamCreator)(configuration).postPushTx(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
exports.WalletApiFp = WalletApiFp;
/**
 * WalletApi - factory interface
 * @export
 */
const WalletApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * check origin
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckOrigin(userAddr, origin, options) {
            return (0, exports.WalletApiFp)(configuration).getCheckOrigin(userAddr, origin, options).then((request) => request(axios, basePath));
        },
        /**
         * ens
         * @param {string} text text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEns(text, options) {
            return (0, exports.WalletApiFp)(configuration).getEns(text, options).then((request) => request(axios, basePath));
        },
        /**
         * explain origin
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExplainOrigin(userAddr, origin, options) {
            return (0, exports.WalletApiFp)(configuration).getExplainOrigin(userAddr, origin, options).then((request) => request(axios, basePath));
        },
        /**
         * get tx
         * @param {string} chainId ChainId
         * @param {string} txId tx hash id
         * @param {string} gasPrice gasPrice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExplainTx(chainId, txId, gasPrice, options) {
            return (0, exports.WalletApiFp)(configuration).getExplainTx(chainId, txId, gasPrice, options).then((request) => request(axios, basePath));
        },
        /**
         * gas market
         * @param {string} chainId ChainId
         * @param {string} [customPrice] CustomPrice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGasMarket(chainId, customPrice, options) {
            return (0, exports.WalletApiFp)(configuration).getGasMarket(chainId, customPrice, options).then((request) => request(axios, basePath));
        },
        /**
         * user pending tx count
         * @param {string} userAddr User Address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTxCount(userAddr, options) {
            return (0, exports.WalletApiFp)(configuration).getPendingTxCount(userAddr, options).then((request) => request(axios, basePath));
        },
        /**
         * recommend chains
         * @param {string} userAddr User Address
         * @param {string} origin DApp WebHost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendChains(userAddr, origin, options) {
            return (0, exports.WalletApiFp)(configuration).getRecommendChains(userAddr, origin, options).then((request) => request(axios, basePath));
        },
        /**
         * wallet support chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportChains(options) {
            return (0, exports.WalletApiFp)(configuration).getSupportChains(options).then((request) => request(axios, basePath));
        },
        /**
         * wallet api config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrlConfig(options) {
            return (0, exports.WalletApiFp)(configuration).getUrlConfig(options).then((request) => request(axios, basePath));
        },
        /**
         * check text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckText(options) {
            return (0, exports.WalletApiFp)(configuration).postCheckText(options).then((request) => request(axios, basePath));
        },
        /**
         * check tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckTx(options) {
            return (0, exports.WalletApiFp)(configuration).postCheckTx(options).then((request) => request(axios, basePath));
        },
        /**
         * eth rpc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEthCall(options) {
            return (0, exports.WalletApiFp)(configuration).postEthCall(options).then((request) => request(axios, basePath));
        },
        /**
         * explain text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExplainText(options) {
            return (0, exports.WalletApiFp)(configuration).postExplainText(options).then((request) => request(axios, basePath));
        },
        /**
         * explain tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExplainTx(options) {
            return (0, exports.WalletApiFp)(configuration).postExplainTx(options).then((request) => request(axios, basePath));
        },
        /**
         * push tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPushTx(options) {
            return (0, exports.WalletApiFp)(configuration).postPushTx(options).then((request) => request(axios, basePath));
        },
    };
};
exports.WalletApiFactory = WalletApiFactory;
/**
 * WalletApi - object-oriented interface
 * @export
 * @class WalletApi
 * @extends {BaseAPI}
 */
class WalletApi extends base_1.BaseAPI {
    /**
     * check origin
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getCheckOrigin(userAddr, origin, options) {
        return (0, exports.WalletApiFp)(this.configuration).getCheckOrigin(userAddr, origin, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * ens
     * @param {string} text text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getEns(text, options) {
        return (0, exports.WalletApiFp)(this.configuration).getEns(text, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * explain origin
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getExplainOrigin(userAddr, origin, options) {
        return (0, exports.WalletApiFp)(this.configuration).getExplainOrigin(userAddr, origin, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * get tx
     * @param {string} chainId ChainId
     * @param {string} txId tx hash id
     * @param {string} gasPrice gasPrice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getExplainTx(chainId, txId, gasPrice, options) {
        return (0, exports.WalletApiFp)(this.configuration).getExplainTx(chainId, txId, gasPrice, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * gas market
     * @param {string} chainId ChainId
     * @param {string} [customPrice] CustomPrice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getGasMarket(chainId, customPrice, options) {
        return (0, exports.WalletApiFp)(this.configuration).getGasMarket(chainId, customPrice, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * user pending tx count
     * @param {string} userAddr User Address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getPendingTxCount(userAddr, options) {
        return (0, exports.WalletApiFp)(this.configuration).getPendingTxCount(userAddr, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * recommend chains
     * @param {string} userAddr User Address
     * @param {string} origin DApp WebHost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getRecommendChains(userAddr, origin, options) {
        return (0, exports.WalletApiFp)(this.configuration).getRecommendChains(userAddr, origin, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * wallet support chain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getSupportChains(options) {
        return (0, exports.WalletApiFp)(this.configuration).getSupportChains(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * wallet api config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    getUrlConfig(options) {
        return (0, exports.WalletApiFp)(this.configuration).getUrlConfig(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * check text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    postCheckText(options) {
        return (0, exports.WalletApiFp)(this.configuration).postCheckText(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * check tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    postCheckTx(options) {
        return (0, exports.WalletApiFp)(this.configuration).postCheckTx(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * eth rpc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    postEthCall(options) {
        return (0, exports.WalletApiFp)(this.configuration).postEthCall(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * explain text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    postExplainText(options) {
        return (0, exports.WalletApiFp)(this.configuration).postExplainText(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * explain tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    postExplainTx(options) {
        return (0, exports.WalletApiFp)(this.configuration).postExplainTx(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * push tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    postPushTx(options) {
        return (0, exports.WalletApiFp)(this.configuration).postPushTx(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.WalletApi = WalletApi;
